
# Define the root logger with appender X
log4j.rootLogger = ALL, X, stdout  
# debugging levels:  TRACE DEBUG INFO WARN ERROR FATAL ALL
# Set the appender named X to be a File appender, we can use any variable in place of X

log4j.appender.X=org.apache.log4j.RollingFileAppender
# Define the layout for X appender
# We have used only one appender FileAppender in our example above. All the possible
# appender options are: AppenderSkeleton,AsyncAppender,ConsoleAppender,DailyRollingFileAppender,ExternallyRolledFileAppender
# FileAppender,JDBCAppender,JMSAppender,LF5Appender,NTEventLogAppender,NullAppender,RollingFileAppender,SMTPAppender,SocketAppender
# SocketHubAppender,SyslogAppender,TelnetAppender,WriterAppender

# log = /usr/home/log4j
log4j.appender.X.File=${catalina_base}/log.out
#log4j.appender.X.File=D:\log\log.out
log4j.appender.X.MaxFileSize=1MB
log4j.appender.X.MaxBackupIndex=1
# The appender FILE is defined as org.apache.log4j.FileAppender. It writes to a
# file named "log.out" located in the log directory.

log4j.appender.X.layout=org.apache.log4j.PatternLayout
# We have used PatternLayout with our appender. All the possible options are:
# DateLayout
# HTMLLayout
# PatternLayout
# SimpleLayout
# XMLLayout
# Using HTMLLayout and XMLLayout, you can generate log in HTML and in XML format as well.

log4j.appender.X.layout.conversionPattern=%m%n
# The layout pattern defined is %m%n, which means the printed logging message
# will be followed by a newline character.

# Direct log messages to stdout log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# log4j.appender.stdout=org.apache.log4j.ConsoleAppender
# log4j.appender.stdout.Target=System.out
# log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
# log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss}
# %-5p %c{1}:%L - %m%n